---
# Ensure Docker data-root exists (SSD)
- name: Ensure data root exists on SSD
  ansible.builtin.file:
    path: "{{ docker_data_root }}"
    state: directory
    owner: root
    group: root
    mode: "0755"
  tags: [docker, docker:install]

# Base packages
- name: Install APT prerequisites
  ansible.builtin.apt:
    name:
      - ca-certificates
      - curl
      - gnupg
    state: present
    update_cache: yes
  tags: [docker, docker:install]

# --- Modern keyrings-based repo setup ---
- name: Ensure /etc/apt/keyrings exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: "0755"
  tags: [docker, docker:install]

- name: Install Docker APT key (keyrings)
  ansible.builtin.get_url:
    url: "{{ docker_apt_repo }}/gpg"
    dest: /etc/apt/keyrings/docker.asc
    mode: "0644"
  tags: [docker, docker:install]

- name: Add Docker APT repository (keyrings)
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] {{ docker_apt_repo }} {{ docker_apt_distro }} stable"
    filename: docker
  tags: [docker, docker:install]

# --- Optional: prepare userns subuid/subgid (only if enabled) ---
# Note: daemon.json should have "userns-remap": "default"
- name: Ensure dockremap exists in /etc/subuid
  ansible.builtin.lineinfile:
    path: /etc/subuid
    regexp: '^dockremap:'
    line: "dockremap:{{ docker_userns_base | default(100000) }}:{{ docker_userns_range | default(65536) }}"
    create: true
    mode: "0644"
  when: docker_userns_enable | default(true)
  tags: [docker, docker:config, docker:userns]

- name: Ensure dockremap exists in /etc/subgid
  ansible.builtin.lineinfile:
    path: /etc/subgid
    regexp: '^dockremap:'
    line: "dockremap:{{ docker_userns_base | default(100000) }}:{{ docker_userns_range | default(65536) }}"
    create: true
    mode: "0644"
  when: docker_userns_enable | default(true)
  tags: [docker, docker:config, docker:userns]

# --- Engine & tooling (supports fixed version via docker_pkg_version) ---
# Example var: docker_pkg_version: "5:28.0.1-1~debian.12~bookworm"
- name: Build Docker package list (with optional version pin)
  ansible.builtin.set_fact:
    _docker_pkgs_effective: >-
      {{
        docker_packages | map('regex_replace','^(.*)$','\\1=' ~ docker_pkg_version) | list
        if (docker_pkg_version is defined and docker_pkg_version|length > 0)
        else docker_packages
      }}
  tags: [docker, docker:install]

- name: Install Docker Engine & tools
  ansible.builtin.apt:
    name: "{{ _docker_pkgs_effective }}"
    state: present
    update_cache: yes
  tags: [docker, docker:install]

# Optional: hold packages to prevent unintended upgrades (idempotent)
- name: Compute package names without versions (for hold)
  ansible.builtin.set_fact:
    _docker_pkgs_names: "{{ _docker_pkgs_effective | map('regex_replace', '=.*$', '') | list }}"
  when: docker_hold | default(false)
  tags: [docker, docker:install]

- name: Hold Docker packages
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop: "{{ _docker_pkgs_names | default([]) }}"
  when: docker_hold | default(false)
  tags: [docker, docker:install]

# --- Daemon config ---
- name: Ensure /etc/docker exists
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    owner: root
    group: root
    mode: "0755"
  tags: [docker, docker:config]

- name: Drop /etc/docker/daemon.json
  ansible.builtin.template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: "0644"
  notify: Restart docker
  tags: [docker, docker:config]

- name: Ensure docker service is not masked
  ansible.builtin.systemd:
    name: docker
    masked: no
  tags: [docker, docker:config]

- name: Enable & start Docker
  ansible.builtin.service:
    name: docker
    enabled: yes
    state: started
  tags: [docker, docker:config]

# Make sure handler ran before any external verify task calls
- name: Flush handlers so docker restarts before external verification
  ansible.builtin.meta: flush_handlers
  tags: [docker, docker:config]

# --- Security: restrict docker socket access ---
- name: Get passwd entries (to guard group membership changes)
  ansible.builtin.getent:
    database: passwd
  tags: [docker, docker:security]

- name: Ensure docker group members (skip non-existent users)
  ansible.builtin.user:
    name: "{{ item }}"
    groups: docker
    append: yes
  loop: "{{ docker_group_members | default([]) }}"
  when: item in ansible_facts.getent_passwd
  tags: [docker, docker:security]

- name: Ensure 'radu' not in docker group
  ansible.builtin.command: gpasswd -d radu docker
  register: drop_radu_docker
  changed_when: drop_radu_docker.rc == 0
  failed_when: false
  tags: [docker, docker:security]
